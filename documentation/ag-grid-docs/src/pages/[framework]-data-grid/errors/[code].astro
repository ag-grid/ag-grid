---
import Layout from '@layouts/Layout.astro';
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import type { Framework } from '@ag-grid-types';
import { FRAMEWORKS, PRODUCTION_GRID_SITE_URL } from '@constants';
import styles from '@ag-website-shared/components/page-styles/docs.module.scss';
import { DocsNav } from '@ag-website-shared/components/docs-navigation/DocsNav';
import { Header } from '@features/docs/components/Header';
import { getErrorText } from '@utils/getErrorText';
import { SideNavigation } from '@components/pages-navigation/components/SideNavigation';
import { getHeadings, getTopHeading } from '@utils/markdoc/getHeadings';
import { DOCS_TAB_ITEM_ID_PREFIX } from '@ag-website-shared/constants';
import {
    AG_GRID_ERRORS,
    type ErrorId,
} from '../../../../../../packages/ag-grid-community/src/validation/errorMessages/errorText';
import Note from '@ag-website-shared/components/alert/Note';
import { getIsArchive } from '@utils/env';
import Warning from '@ag-website-shared/components/alert/Warning';

interface Params {
    framework: Framework;
    code: string;
}
interface Props {
    errorPage?: CollectionEntry<'errors'>;
}

export async function getStaticPaths() {
    const errors = await getCollection('errors');
    return FRAMEWORKS.flatMap((framework: Framework) => {
        return Object.keys(AG_GRID_ERRORS).map((codeNum) => {
            const code = codeNum.toString();
            const errorPage = errors.find(({ slug }) => slug === code);
            return {
                params: {
                    framework,
                    code,
                },
                props: {
                    errorPage,
                },
            };
        });
    });
}

const { framework, code } = Astro.params as Params;
const { errorPage } = Astro.props as Props;
const errorCode = parseInt(code, 10) as ErrorId;
const title = `AG Grid Error #${code}`;
const description = errorPage?.data.description ? errorPage?.data.description : '';

const { Content } = errorPage ? await errorPage.render() : { Content: undefined };

const { data: docsNavData } = await getEntry('docs-nav', 'docsNav');

const path = Astro.url.pathname;
const pageName = `errors/${code}`;
const defaultErrorText = getErrorText({ errorCode });

const getTabItemSlug = (id: string) => `${DOCS_TAB_ITEM_ID_PREFIX}${id}`;
const topHeading = getTopHeading(title);
const fullErrorTextHeading = { slug: getTabItemSlug('full-error-text'), depth: 2, text: 'Full Error Text' };
const headings = errorPage
    ? (
          await getHeadings({
              title,
              pageName,
              markdocContent: errorPage.body,
              framework,
              getTabItemSlug,
          })
      ).concat(fullErrorTextHeading)
    : [topHeading, fullErrorTextHeading];
const isArchive = getIsArchive();
// TODO: Update this when we have a migration page
const migrationUrl = PRODUCTION_GRID_SITE_URL;
---

<Layout title={title} description={description} showSearchBar={true} showDocsNav={true}>
    <div class:list={[styles.contentViewport, 'layout-grid']}>
        <DocsNav client:load menuData={docsNavData} framework={framework} pageName={pageName} />

        <div id="doc-content" class:list={[styles.docPage, styles.errorPage]}>
            <Header client:load title={title} framework={framework} path={path} menuItems={docsNavData.sections} />
            {
                isArchive && (
                    <Warning>
                        You are using an older version of AG Grid. To upgrade, please see the{' '}
                        <a href={migrationUrl}>migration guide</a>.
                    </Warning>
                )
            }
            <div class={styles.pageSections}>
                {Content ? <Content framework={framework} /> : undefined}

                <h2 id={fullErrorTextHeading.slug}>{fullErrorTextHeading.text}</h2>
                <pre id="errorCodeText" style="white-space: pre-wrap;">{defaultErrorText}</pre>
                <Note>To show this error text in the dev console, import the <code>ValidationModule</code>.</Note>
            </div>
        </div>

        <SideNavigation client:load headings={headings} />
    </div>
</Layout>

<script>
    import { getErrorText } from '@utils/getErrorText';
    import type { ErrorId } from '../../../../../../packages/ag-grid-community/src/validation/errorMessages/errorText';
    import { VERSION } from '../../../../../../packages/ag-grid-community/src/version';
    import { getErrorRedirectBaseUrl } from '@utils/getErrorRedirectBaseUrl';
    import { pathJoin } from '@utils/pathJoin';

    // Get errorCode from url, so it doesn't need to be passed
    // in from Astro and we can import in this script
    const errorCode = parseInt(window.location.pathname.split('/').filter(Boolean).slice(-1)[0], 10) as ErrorId;
    const searchParams = new URLSearchParams(window.location.search);
    const { _version_, ...params } = Object.fromEntries(searchParams.entries());
    const errorText = getErrorText({ errorCode, params });
    const errorRedirectBaseUrl = getErrorRedirectBaseUrl({ errorVersion: _version_, pageVersion: VERSION });

    if (errorRedirectBaseUrl) {
        const redirectUrl = pathJoin(errorRedirectBaseUrl, window.location.pathname, window.location.search);
        window.location.replace(redirectUrl);
    }

    const errorCodeTextEl = document.getElementById('errorCodeText');
    if (errorCodeTextEl) {
        errorCodeTextEl.textContent = errorText;
    }
</script>
