// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Snippet Component > given a mix of grid options > it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    [rowSelection]="rowSelection"
    [rowHeight]="rowHeight"
    [rowDragManaged]="rowDragManaged"
    [columnMenu]="columnMenu"
    [postSort]="postSort"
    /* other grid options ... */ />

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
this.rowSelection = { mode: 'singleRow' };
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.columnMenu = 'new';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    [rowSelection]="rowSelection"
    [rowHeight]="rowHeight"
    [rowDragManaged]="rowDragManaged"
    [columnMenu]="columnMenu"
    [postSort]="postSort"
    /* other grid options ... */ />

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

this.rowSelection = { mode: 'singleRow' };

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.columnMenu = 'new';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'angular' snippets without framework context 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
this.rowSelection = { mode: 'singleRow' };
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.columnMenu = 'new';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'angular' snippets without framework context and space between properties 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

this.rowSelection = { mode: 'singleRow' };

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.columnMenu = 'new';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // columnDefs property (special)
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],
    // object property
    defaultColDef: {
        // set every column width
        width: 100,
    },
    rowSelection: { mode: 'singleRow' },
    // numeric property
    rowHeight: 50,
    // boolean property
    rowDragManaged: true,
    // string property
    columnMenu: 'new',
    // function property
    postSort: rowNodes => {
        // here we put Ireland rows on top while preserving the sort order  
        let nextInsertPos = 0;
        for (let i = 0; i < rowNodes.length; i++) {
            const country = rowNodes[i].data.country;      
            if (country === 'Ireland') {        
                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
                nextInsertPos++;
            }
        }
    },

    // other grid options ...
}"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    // columnDefs property (special)
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],

    // object property
    defaultColDef: {
        // set every column width
        width: 100,
    },

    rowSelection: { mode: 'singleRow' },

    // numeric property
    rowHeight: 50,

    // boolean property
    rowDragManaged: true,

    // string property
    columnMenu: 'new',

    // function property
    postSort: rowNodes => {
        // here we put Ireland rows on top while preserving the sort order  
        let nextInsertPos = 0;
        for (let i = 0; i < rowNodes.length; i++) {
            const country = rowNodes[i].data.country;      
            if (country === 'Ireland') {        
                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
                nextInsertPos++;
            }
        }
    },

    // other grid options ...
}"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'javascript' snippets without framework context 1`] = `
"// columnDefs property (special)
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],
// object property
defaultColDef: {
    // set every column width
    width: 100,
},
rowSelection: { mode: 'singleRow' },
// numeric property
rowHeight: 50,
// boolean property
rowDragManaged: true,
// string property
columnMenu: 'new',
// function property
postSort: rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
},"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// columnDefs property (special)
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],

// object property
defaultColDef: {
    // set every column width
    width: 100,
},

rowSelection: { mode: 'singleRow' },

// numeric property
rowHeight: 50,

// boolean property
rowDragManaged: true,

// string property
columnMenu: 'new',

// function property
postSort: rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
},"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'react' snippets 1`] = `
"// columnDefs property (special)
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);
// object property
const defaultColDef = useMemo(() => { 
	return {
        // set every column width
        width: 100,
    };
}, []);
const rowSelection = useMemo(() => { 
	return { mode: 'singleRow' };
}, []);
// numeric property
const rowHeight = 50;
// boolean property
const rowDragManaged = true;
// string property
const columnMenu = 'new';
// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    columnDefs={columnDefs}
    defaultColDef={defaultColDef}
    rowSelection={rowSelection}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    columnMenu={columnMenu}
    postSort={postSort}
/>"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'react' snippets with space between properties 1`] = `
"// columnDefs property (special)
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);

// object property
const defaultColDef = useMemo(() => { 
	return {
        // set every column width
        width: 100,
    };
}, []);

const rowSelection = useMemo(() => { 
	return { mode: 'singleRow' };
}, []);

// numeric property
const rowHeight = 50;

// boolean property
const rowDragManaged = true;

// string property
const columnMenu = 'new';

// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    columnDefs={columnDefs}
    defaultColDef={defaultColDef}
    rowSelection={rowSelection}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    columnMenu={columnMenu}
    postSort={postSort}
/>"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'react' snippets without framework context 1`] = `
"// columnDefs property (special)
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);
// object property
const defaultColDef = useMemo(() => { 
	return {
        // set every column width
        width: 100,
    };
}, []);
const rowSelection = useMemo(() => { 
	return { mode: 'singleRow' };
}, []);
// numeric property
const rowHeight = 50;
// boolean property
const rowDragManaged = true;
// string property
const columnMenu = 'new';
// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    columnDefs={columnDefs}
    defaultColDef={defaultColDef}
    rowSelection={rowSelection}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    columnMenu={columnMenu}
    postSort={postSort}
/>"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'react' snippets without framework context and space between properties 1`] = `
"// columnDefs property (special)
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);

// object property
const defaultColDef = useMemo(() => { 
	return {
        // set every column width
        width: 100,
    };
}, []);

const rowSelection = useMemo(() => { 
	return { mode: 'singleRow' };
}, []);

// numeric property
const rowHeight = 50;

// boolean property
const rowDragManaged = true;

// string property
const columnMenu = 'new';

// function property
const postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};

<AgGridReact
    columnDefs={columnDefs}
    defaultColDef={defaultColDef}
    rowSelection={rowSelection}
    rowHeight={rowHeight}
    rowDragManaged={rowDragManaged}
    columnMenu={columnMenu}
    postSort={postSort}
/>"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    :defaultColDef="defaultColDef"
    :rowSelection="rowSelection"
    :rowHeight="rowHeight"
    :rowDragManaged="rowDragManaged"
    :columnMenu="columnMenu"
    :postSort="postSort"
    /* other grid options ... */>
</ag-grid-vue>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
this.rowSelection = { mode: 'singleRow' };
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.columnMenu = 'new';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    :defaultColDef="defaultColDef"
    :rowSelection="rowSelection"
    :rowHeight="rowHeight"
    :rowDragManaged="rowDragManaged"
    :columnMenu="columnMenu"
    :postSort="postSort"
    /* other grid options ... */>
</ag-grid-vue>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

this.rowSelection = { mode: 'singleRow' };

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.columnMenu = 'new';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'vue' snippets without framework context 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
this.rowSelection = { mode: 'singleRow' };
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.columnMenu = 'new';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given a mix of grid options > it should create 'vue' snippets without framework context and space between properties 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];

// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};

this.rowSelection = { mode: 'singleRow' };

// numeric property
this.rowHeight = 50;

// boolean property
this.rowDragManaged = true;

// string property
this.columnMenu = 'new';

// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component > given api statements > it should create 'angular' snippets 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'angular' snippets with space between properties 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'angular' snippets without framework context 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'angular' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'javascript' snippets 1`] = `
"// save the columns state
const savedState = api.getColumnState(); 

// restore the column state
api.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = api.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'javascript' snippets with space between properties 1`] = `
"// save the columns state
const savedState = api.getColumnState(); 

// restore the column state
api.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = api.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'javascript' snippets without framework context 1`] = `
"// save the columns state
const savedState = api.getColumnState(); 

// restore the column state
api.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = api.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = api.getColumnState(); 

// restore the column state
api.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = api.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'react' snippets 1`] = `
"// save the columns state
const savedState = gridApi.getColumnState(); 

// restore the column state
gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'react' snippets with space between properties 1`] = `
"// save the columns state
const savedState = gridApi.getColumnState(); 

// restore the column state
gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'react' snippets without framework context 1`] = `
"// save the columns state
const savedState = gridApi.getColumnState(); 

// restore the column state
gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'react' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = gridApi.getColumnState(); 

// restore the column state
gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'vue' snippets 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'vue' snippets with space between properties 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'vue' snippets without framework context 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given api statements > it should create 'vue' snippets without framework context and space between properties 1`] = `
"// save the columns state
const savedState = this.gridApi.getColumnState(); 

// restore the column state
this.gridApi.applyColumnState({ state: savedState });

// get the row node with ID 55
const rowNode = this.gridApi.getRowNode('55');"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'angular' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'angular' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'country',
            // col span is 2 for rows with Russia, but 1 for everything else
            colSpan: params => params.data.country === 'Russia' ? 2 : 1,
        },        
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'country',
            // col span is 2 for rows with Russia, but 1 for everything else
            colSpan: params => params.data.country === 'Russia' ? 2 : 1,
        },        
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'javascript' snippets without framework context 1`] = `
"columnDefs: [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
],"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"columnDefs: [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
],"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'react' snippets 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'react' snippets with space between properties 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'react' snippets without framework context 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'react' snippets without framework context and space between properties 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'vue' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given col defs with arrow function properties > it should create 'vue' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'country',
        // col span is 2 for rows with Russia, but 1 for everything else
        colSpan: params => params.data.country === 'Russia' ? 2 : 1,
    },        
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'angular' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'angular' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'age',
            // simple number comparator
            comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
        },
        {
            field: 'name',
            // simple string comparator
            comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
                if (valueA == valueB) return 0;
                return (valueA > valueB) ? 1 : -1;
            }
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            field: 'age',
            // simple number comparator
            comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
        },
        {
            field: 'name',
            // simple string comparator
            comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
                if (valueA == valueB) return 0;
                return (valueA > valueB) ? 1 : -1;
            }
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'javascript' snippets without framework context 1`] = `
"columnDefs: [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
],"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"columnDefs: [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
],"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'react' snippets 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'react' snippets with space between properties 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'react' snippets without framework context 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'react' snippets without framework context and space between properties 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'vue' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with functions > it should create 'vue' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        field: 'age',
        // simple number comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => valueA - valueB
    },
    {
        field: 'name',
        // simple string comparator
        comparator: (valueA, valueB, nodeA, nodeB, isDescending) => {
            if (valueA == valueB) return 0;
            return (valueA > valueB) ? 1 : -1;
        }
    }
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'angular' snippets without framework context 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'angular' snippets without framework context and space between properties 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // 2 levels of grouping
    columnDefs: [
        {
            headerName: 'G1',
            children: [
                { headerName: 'C1', field: 'c1' },
                {
                    headerName: 'G2',
                    children: [
                        { headerName: 'C2', field: 'c2' },
                        { headerName: 'C3', field: 'c3' },
                    ],
                },
                { headerName: 'C4', field: 'c4' },
            ],
        },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    // 2 levels of grouping
    columnDefs: [
        {
            headerName: 'G1',
            children: [
                { headerName: 'C1', field: 'c1' },
                {
                    headerName: 'G2',
                    children: [
                        { headerName: 'C2', field: 'c2' },
                        { headerName: 'C3', field: 'c3' },
                    ],
                },
                { headerName: 'C4', field: 'c4' },
            ],
        },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'javascript' snippets without framework context 1`] = `
"// 2 levels of grouping
columnDefs: [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
],"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// 2 levels of grouping
columnDefs: [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
],"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'react' snippets 1`] = `
"// 2 levels of grouping
const [columnDefs, setColumnDefs] = useState([
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'react' snippets with space between properties 1`] = `
"// 2 levels of grouping
const [columnDefs, setColumnDefs] = useState([
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'react' snippets without framework context 1`] = `
"// 2 levels of grouping
const [columnDefs, setColumnDefs] = useState([
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'react' snippets without framework context and space between properties 1`] = `
"// 2 levels of grouping
const [columnDefs, setColumnDefs] = useState([
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'vue' snippets without framework context 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given column definitions with group columns > it should create 'vue' snippets without framework context and space between properties 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'angular' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'angular' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            filterType: 'multi',
            filterModels: [
                null,
                { filterType: 'set', values: ['A', 'B', 'C'] }
            ]
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    columnDefs: [
        {
            filterType: 'multi',
            filterModels: [
                null,
                { filterType: 'set', values: ['A', 'B', 'C'] }
            ]
        }
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'javascript' snippets without framework context 1`] = `
"columnDefs: [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
],"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"columnDefs: [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
],"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'react' snippets 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'react' snippets with space between properties 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'react' snippets without framework context 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'react' snippets without framework context and space between properties 1`] = `
"const [columnDefs, setColumnDefs] = useState([
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'vue' snippets without framework context 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given complex column definition with array property > it should create 'vue' snippets without framework context and space between properties 1`] = `
"this.columnDefs = [
    {
        filterType: 'multi',
        filterModels: [
            null,
            { filterType: 'set', values: ['A', 'B', 'C'] }
        ]
    }
];"
`;

exports[`Snippet Component > given function declaration > it should create 'angular' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'angular' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'angular' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'angular' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'javascript' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'javascript' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'javascript' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'react' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'react' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'react' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'react' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'vue' snippets 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'vue' snippets with space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'vue' snippets without framework context 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given function declaration > it should create 'vue' snippets without framework context and space between properties 1`] = `
"// some value handler
const myValueFormatter = params => {
    return '(' + params.value + ')';
};"
`;

exports[`Snippet Component > given simple column definitions > it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component > given simple column definitions > it should create 'angular' snippets with space between properties 1`] = `
"<ag-grid-angular
    [columnDefs]="columnDefs"
    /* other grid options ... */ />

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component > given simple column definitions > it should create 'angular' snippets without framework context 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component > given simple column definitions > it should create 'angular' snippets without framework context and space between properties 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component > given simple column definitions > it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // define 3 columns
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given simple column definitions > it should create 'javascript' snippets with space between properties 1`] = `
"const gridOptions = {
    // define 3 columns
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],

    // other grid options ...
}"
`;

exports[`Snippet Component > given simple column definitions > it should create 'javascript' snippets without framework context 1`] = `
"// define 3 columns
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],"
`;

exports[`Snippet Component > given simple column definitions > it should create 'javascript' snippets without framework context and space between properties 1`] = `
"// define 3 columns
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],"
`;

exports[`Snippet Component > given simple column definitions > it should create 'react' snippets 1`] = `
"// define 3 columns
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given simple column definitions > it should create 'react' snippets with space between properties 1`] = `
"// define 3 columns
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given simple column definitions > it should create 'react' snippets without framework context 1`] = `
"// define 3 columns
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given simple column definitions > it should create 'react' snippets without framework context and space between properties 1`] = `
"// define 3 columns
const [columnDefs, setColumnDefs] = useState([
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
]);

<AgGridReact columnDefs={columnDefs} />"
`;

exports[`Snippet Component > given simple column definitions > it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component > given simple column definitions > it should create 'vue' snippets with space between properties 1`] = `
"<ag-grid-vue
    :columnDefs="columnDefs"
    /* other grid options ... */>
</ag-grid-vue>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component > given simple column definitions > it should create 'vue' snippets without framework context 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component > given simple column definitions > it should create 'vue' snippets without framework context and space between properties 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;
