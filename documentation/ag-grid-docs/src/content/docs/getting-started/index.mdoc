---
title: "Quick Start"
description: "Build a $framework Table with AG Grid, the best free, fast and flexible $framework Data Grid. Features Sorting, Filtering, Pagination, Custom Components, and more."
---

{% if isFramework("vue") %}
This page covers the key concepts of AG Grid: A high performance, feature rich, Vue Table and Vue Data Grid. 
{% /if %}

{% if isFramework("react") %}
{% videoSection id="6hxbPqziELk" title="React Data Grid quick start video tutorial" playlist="PLsZlhayVgqNwHNHeqpCkSgdRV08xrKtzW" showHeader=true %}
This page covers the key concepts of AG Grid: A high performance, feature rich, [React Table](/react-table/) and React Data Grid. 
{% /videoSection %}
{% /if %}

{% if isFramework("angular") %}
{% videoSection id="X_Ip_jGDtho" title="Angular Data Grid quick start video tutorial" playlist="PLsZlhayVgqNw6VHFn4j6FcJM5vLACsf0x" showHeader=true %}
This page covers the key concepts of AG Grid: A high performance, feature rich, Angular Table and Angular Data Grid. 
{% /videoSection %}
{% /if %}

{% if isFramework("javascript") %}
{% videoSection id="Ww7-LC6rU6U" title="JavaScript Data Grid quick start video tutorial" playlist="PLsZlhayVgqNxijfRQxg5Mc6W4MzZHQ9MK" showHeader=true %}
This page covers the key concepts of AG Grid: A high performance, feature rich, JavaScript Table and JavaScript Data Grid. 
{% /videoSection %}
{% /if %}

{% if isFramework("react") %}
## Your First React Data Grid
{% /if %}

{% if isFramework("angular") %}
## Your First Angular Data Grid
{% /if %}

{% if isFramework("javascript") %}
## Your First JavaScript Data Grid
{% /if %}

{% if isFramework("vue") %}
## Your First Vue Data Grid
{% /if %}

Add AG Grid to your application in these steps:

{% if isFramework("react", "angular", "vue") %}
**1. NPM Install**
{% /if %}

{% if isFramework("react") %}
<!-- Install React -->

```bash
npm install ag-grid-react
```
{% /if %}

{% if isFramework("angular") %}
<!-- Install Angular -->

```bash
npm install ag-grid-angular
```
{% /if %}

{% if isFramework("vue") %}
<!-- Install Vue3 -->

```bash
npm install ag-grid-vue3
```
{% /if %}

{% if isFramework("javascript") %}
{% metaTag tags=["createGrid"] /%}
**1. Provide a Container**

<!-- Create JavaScript -->

Load the AG Grid library and create a container div. The div should have a height because the Data Grid will fill the size of the parent container:

```html
<html lang="en">
    <head>
        <!-- Includes all JS & CSS for the JavaScript Data Grid -->
        <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    </head>
    <body>
        <!-- Your Data Grid container -->
        <div id="myGrid" style="height: 500px"></div>
    </body>
</html>
```

**2. Instantiating the JavaScript Data Grid**

Create the Data Grid inside of your container div using `createGrid`.

```js
// Grid Options: Contains all of the Data Grid configurations
const gridOptions = {};

// Your Javascript code to create the Data Grid
const myGridElement = document.querySelector('#myGrid');
agGrid.createGrid(myGridElement, gridOptions);
```

**3. Define Rows and Columns**

```js
// Grid Options: Contains all of the Data Grid configurations
const gridOptions = {
    // Row Data: The data to be displayed.
    rowData: [
        { make: "Tesla", model: "Model Y", price: 64950, electric: true },
        { make: "Ford", model: "F-Series", price: 33850, electric: false },
        { make: "Toyota", model: "Corolla", price: 29600, electric: false },
    ],
    // Column Definitions: Defines the columns to be displayed.
    columnDefs: [
        { field: "make" },
        { field: "model" },
        { field: "price" },
        { field: "electric" }
    ]
};
```

{% /if %}

{% if isFramework("react") %}
{% metaTag tags=["aggridreact"] /%}
<!-- Create React -->

**2. Import the React Data Grid**

```js
import { AgGridReact } from 'ag-grid-react'; // React Data Grid Component
```

**3. Define Rows and Columns**

```js
const GridExample = () => {
    // Row Data: The data to be displayed.
    const [rowData, setRowData] = useState([
        { make: "Tesla", model: "Model Y", price: 64950, electric: true },
        { make: "Ford", model: "F-Series", price: 33850, electric: false },
        { make: "Toyota", model: "Corolla", price: 29600, electric: false },
    ]);

    // Column Definitions: Defines the columns to be displayed.
    const [colDefs, setColDefs] = useState([
        { field: "make" },
        { field: "model" },
        { field: "price" },
        { field: "electric" }
    ]);

    // ...
}
```

**4. React Data Grid Component**

The `AgGridReact` component is wrapped in a parent container `div`. Style is applied to the parent container.
Rows and Columns are set as `AgGridReact` component attributes.

```jsx
return (
    <div
        // define a height because the Data Grid will fill the size of the parent container
        style={{ height: 500 }}
    >
        <AgGridReact
                rowData={rowData}
                columnDefs={colDefs}
        />
    </div>
)
```
{% /if %}

{% if isFramework("angular") %}

**2. Import the Angular Data Grid**

```js
import { Component } from '@angular/core';
import { AgGridAngular } from 'ag-grid-angular'; // Angular Data Grid Component
import { ColDef } from 'ag-grid-community'; // Column Definition Type Interface
```

**3. Define Rows and Columns**

```jsx
@Component({
    selector: 'app-root',
    standalone: true,
    imports: [AgGridAngular], // Add Angular Data Grid Component
    styleUrls: ['./app.component.css'],
    template: ``
})

export class AppComponent {
    // Row Data: The data to be displayed.
    rowData = [
        { make: "Tesla", model: "Model Y", price: 64950, electric: true },
        { make: "Ford", model: "F-Series", price: 33850, electric: false },
        { make: "Toyota", model: "Corolla", price: 29600, electric: false },
    ];

    // Column Definitions: Defines the columns to be displayed.
    colDefs: ColDef[] = [
        { field: "make" },
        { field: "model" },
        { field: "price" },
        { field: "electric" }
    ];
}
```

**4. Angular Data Grid Component**

Rows and Columns are set as `ag-grid-angular` component attributes.

```js
template:
`
    <!-- The AG Grid component -->
    <ag-grid-angular
        [rowData]="rowData"
        [columnDefs]="colDefs" />
`
```

{% /if %}

{% if isFramework("vue") %}

**2. Import the Vue Data Grid**

```html
<template></template>

<script>
import { ref } from 'vue';
import { AgGridVue } from "ag-grid-vue3"; // Vue Data Grid Component

export default {
    name: "App",
    components: {
        AgGridVue, // Add Vue Data Grid component
    },
    setup() {},
};
</script>
```

**3. Define Rows and Columns**

```js
setup() {
    // Row Data: The data to be displayed.
    const rowData = ref([
        { make: "Tesla", model: "Model Y", price: 64950, electric: true },
        { make: "Ford", model: "F-Series", price: 33850, electric: false },
        { make: "Toyota", model: "Corolla", price: 29600, electric: false },
    ]);

    // Column Definitions: Defines the columns to be displayed.
    const colDefs = ref([
        { field: "make" },
        { field: "model" },
        { field: "price" },
        { field: "electric" }
    ]);

    return {
        rowData,
        colDefs,
    };
},
```

**4. Vue Data Grid Component**

Rows and Columns are set as `ag-grid-vue` component attributes. Styling is applied through the class and style attributes.

```html
<template>
    <!-- The AG Grid component -->
    <ag-grid-vue
        :rowData="rowData"
        :columnDefs="colDefs"
        style="height: 500px"
    >
    </ag-grid-vue>
</template>
```
{% /if %}

{% if isFramework("angular") %}
**5. Running the Angular Data Grid**
{% /if %}

{% if isFramework("react") %}
**5. Running the React Data Grid**
{% /if %}

{% if isFramework("vue") %}
**5. Running the Vue Data Grid**
{% /if %}

{% if isFramework("javascript") %}
**4. Running the JavaScript Data Grid**
{% /if %}

Below is a live example of the application running. Click `</> Code` to see the code.

{% gridExampleRunner title="Quick Start Example" name="quick-start-example"  exampleHeight=303 /%}

{% note %}
To live-edit the code, open the example in CodeSandbox or Plunker using the buttons to the lower-right.
{% /note %}

{% if isFramework("angular") %}
Now that you have a basic Angular Data Grid running, the remainder of this page explores some of the key concepts.
{% /if %}

{% if isFramework("react") %}
Now that you have a basic React Data Grid running, the remainder of this page explores some of the key concepts.
{% /if %}

{% if isFramework("vue") %}
Now that you have a basic Vue Data Grid running, the remainder of this page explores some of the key concepts.
{% /if %}

{% if isFramework("javascript") %}
Now that you have a basic JavaScript Data Grid running, the remainder of this page explores some of the key concepts.
{% /if %}

## Showing Data

### Mapping Values

The `field` or `valueGetter` attributes [Map Data to Columns](./column-definitions). A field maps to a field in the data. A [Value Getter](./value-getters/) is a function callback that returns the cell value.

The `headerName` provides the title for the header. If missing the title is derived from `field`.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { headerName: "Make & Model", valueGetter: p => p.make + ' ' + p.model},
        { field: "price" },
    ],
};
```

### Text Formatting

Format text for cell content using a [Value Formatter](./value-formatters/).

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: "price", valueFormatter: p => 'Â£' + p.value.toLocaleString() },
    ],
};
```

### Cell Components

Add buttons, checkboxes or images to cells with a [Cell Component](./component-cell-renderer/).

{% if isFramework("react") %}
```jsx
const CustomButtonComponent = (props) => {
    return <button onClick={() => window.alert('clicked') }>Push Me!</button>;
};

const [colDefs, setColDefs] = useState([
    { field: "button", cellRenderer: CustomButtonComponent },
    // ...
]);
```
{% /if %}

{% if isFramework("javascript") %}
```js
class CustomButtonComponent {
    eGui;
    eButton;
    eventListener;

    init(params) {
        this.eGui = document.createElement("div");
        let button = document.createElement("button");
        button.className = "btn-simple";
        button.textContent = "Push Me!";
        this.eventListener = () => alert("clicked");
        button.addEventListener("click", this.eventListener);
        this.eGui.appendChild(button);
    }

    getGui() {
        return this.eGui;
    }

    refresh(params) {
        return true;
    }

    destroy() {
        if (button) {
            button.removeEventListener("click", this.eventListener);
        }
    }
}


const columnDefs = [
    { field: "button", cellRenderer: CustomButtonComponent },
    // ...
];
```
{% /if %}

{% if isFramework("angular") %}
```js
@Component({
    standalone: true,
    template: `<button (click)="buttonClicked()">Push Me!</button>`,
})
export class CustomButtonComponent implements ICellRendererAngularComp {
    agInit(params: ICellRendererParams): void {}
    refresh(params: ICellRendererParams) {
        return true;
    }
    buttonClicked() {
        alert("clicked");
    }
}

columnDefs: ColDef[] = [
    { field: "button", cellRenderer: CustomButtonComponent },
    // ...
];
```
{% /if %}

{% if isFramework("vue") %}
```js
// ...
    components: {
        "ag-grid-vue": AgGridVue,
        CustomButtonComponent: {
            template: `
                <button @click="buttonClicked()">Push Me!</button>
            `,
            methods: {
            buttonClicked() {
                alert("clicked");
            },
            },
        },
    },
    data: function () {
        return {
        columnDefs: [
            { field: "button", cellRenderer: CustomButtonComponent },
            // ...
        ],
    };
},
// ...
```
{% /if %}

### Resizing Columns

Columns are [Resized](./column-sizing/) by dragging the Column Header edges. Additionally assign `flex` values to
allow columns to flex to the grid width.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: "make", flex: 2 }, //This column will be twice as wide as the others
        { field: "model", flex: 1 },
        { field: "price", flex: 1 },
        { field: "electric", flex: 1 }
    ],
};
```

### Example

This example demonstrates mapping and formatting values, cell components, and resizing columns.

{% gridExampleRunner title="Showing Data Example" name="showing-data-example" exampleHeight=303 /%}

## Working with Data

By default, the row data is used to infer the [Cell Data Type](./cell-data-types/). The cell data type allows grid features, such as filtering and editing, to work without additional configuration.

### Filtering

[Column Filters](./filtering/) are embedded into each column menu. These are enabled using the `filter` attribute. The filter type is inferred from the cell data type.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: "make", filter: true },
    ],
};
```

There are 5 [Provided Filters](./filtering/) which can be set through this attribute.
You can also create your own [Custom Filter](./component-filter/).

[Floating Filters](./floating-filters/) embed the Column Filter into the header for ease of access.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: "make", filter: true, floatingFilter: true },
    ],
};
```

### Editing

Enable [Editing](./cell-editing/) by setting the `editable` attribute to `true`. The cell editor is inferred from the cell data type.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: "make", editable: true },
    ],
};
```

Set the cell editor type using the `cellEditor` attribute. There are 7 [Provided Cell Editors](./provided-cell-editors/) which can be set through this attribute.
You can also create your own [Custom Editors](./cell-editors/).

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        {
            field: "make",
            editable: true,
            cellEditor: 'agSelectCellEditor',
            cellEditorParams: {
                values: ['Tesla', 'Ford', 'Toyota'],
            },
        },
    ],
};
```

### Sorting

Data is [Sorted](./row-sorting/) by clicking the column headers. Sorting is enabled by default.

### Row Selection

[Row Selection](./row-selection/) is enabled using the `rowSelection` attribute.

```{% frameworkTransform=true %}
const gridOptions = {
    // Column Definitions: Defines the columns to be displayed.
    columnDefs: [
        { field: "make" },
    ],
    rowSelection: {
      mode: 'multiRow',
    },
};
```

### Pagination

Enable [Pagination](./row-pagination/) by setting `pagination` to be true.

```{% frameworkTransform=true %}
const gridOptions = {
    pagination: true,
    paginationPageSize: 500,
    paginationPageSizeSelector: [200, 500, 1000],
};
```

### Example

This example demonstrates filtering, editing, sorting, row selection, and pagination.

{% gridExampleRunner title="Working With Data Example" name="working-with-data-example" exampleHeight=500 /%}

## Themes & Style

### Themes

[Grid Themes](./theming/) define how the grid looks (colors, font, spacing etc). The default theme is called Quartz. You can choose a [different theme](./themes/), or customise a built-in theme by changing parameters. Here we create a new theme based on Quartz:

```js
import { themeQuartz }; // or themeBalham, themeMaterial, themeAlpine

const myTheme = themeQuartz.withParams({
    /* Low spacing = very compact */
    spacing: 2,
    /* Changes the color of the grid text */
    foregroundColor: 'rgb(14, 68, 145)',
    /* Changes the color of the grid background */
    backgroundColor: 'rgb(241, 247, 255)',
    /* Changes the header color of the top row */
    headerBackgroundColor: 'rgb(228, 237, 250)',
    /* Changes the hover color of the row*/
    rowHoverColor: 'rgb(216, 226, 255)',
});

{% if isFramework("react") %}
...
return (
    <div>
        <AgGridReact theme={myTheme} rowData={...} columnDefs={...} />
    </div>
)
{% /if %}
{% if isFramework("javascript") %}
const gridOptions = {
    theme: myTheme,
    ...
}
{% /if %}
{% if isFramework("angular") %}
// ...
    template: `<div style="height: 100%; box-sizing: border-box;">
        <ag-grid-angular
            // ...
            [theme]="theme"
            />
    </div>`,
// ...
public theme = myTheme;
{% /if %}
{% if isFramework("vue") %}
const VueExample = {
    template: `
        <div style="height: 100%">
            <div style="height: 100%; box-sizing: border-box;">
                <ag-grid-vue
                // ...
                :theme="theme"></ag-grid-vue>
            </div>
        </div>
    `,
// ...
 data: function () {
    return {
        // ...
        theme: myTheme,
    };
 },
// ...
{% /if %}
```


{% gridExampleRunner title="Customising Quartz Theme" name="custom-quartz-theme" suppressDarkMode=true /%}

### Figma

If you are designing within Figma, you can use the [AG Grid Design System](./ag-grid-design-system/) to replicate the
Quartz and Alpine AG Grid themes within Figma. These default themes can be extended with Figma variables to match any
existing visual design or create entirely new AG Grid themes. These can then be exported and generated into new AG Grid
themes.

{% figmaCommunityButton /%}

### Cell Style

Define rules to apply [Styling to Cells](./cell-styles) using `cellClassRules`. This can be used, for example, to set cell background colour based on its value.

```css
.rag-green {
  background-color: #33cc3344;
}
```

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [{
        field: 'electric',
        cellClassRules: {
            // apply green to electric cars
            'rag-green': params => params.value === true,
        }
    }],
};
```

### Row Style

Define rules to apply [Styling to Rows](./row-styles) using `rowClassRules`. This allows changing style (e.g. row colour) based on row values.

```css
.rag-red {
  background-color: #cc222244;
}
```

```{% frameworkTransform=true %}
const gridOptions = {
    rowClassRules: {
        // apply red to Ford cars
        'rag-red': params => params.data.make === 'Ford',
    },
};
```

### Example

This example demonstrates cell style and row style.

{% gridExampleRunner title="Cell and Row Style" name="cell-row-style" /%}

## Next Steps

* Read our [Introductory Tutorial](./deep-dive/).
* Watch our [Video Tutorials](./videos/).
