---
title: "Row Pagination"
description: "Paginate rows to remove vertical scrolling in your $framework Data Grid. Pagination is supported in all row models. Customise pagination and pagination controls."
---

Pagination allows the grid to paginate rows, removing the need for a vertical scroll to view more data.

To enable pagination set the grid property `pagination=true`.

{% gridExampleRunner title="Client Paging" name="client-paging" /%}

## Supported Row Models

Pagination in AG Grid is supported in [all the different row models](./row-models/). The [Client-Side Row Model](./row-models/#client-side) (the default row model) is used for the examples on this page.

To see the specifics of pagination on the other row models check the relevant documentation for [Infinite Row Model](./infinite-scrolling/#pagination), [Viewport Row Model](./viewport/#example-viewport-with-pagination) and [Server-Side Row Model](./server-side-model-pagination/).

## Number Formats

The numbers within the Paging Toolbar can be formatted by replacing the thousand and decimal separators. This can be achieved by customising localisation, for more info see [Localisation](./localisation/).

## Example: Auto Page Size

If you set `paginationAutoPageSize=true` the grid will automatically show as many rows in each page as it can fit. This is demonstrated below. Note if you resize the display area of the grid, the page size automatically changes. To view this, open the example up in a new tab and resize your browser.

{% gridExampleRunner title="Auto Page Size" name="auto-page-size" /%}

{% note %}
Each pagination page must have the same number of rows. If you use `paginationAutoPageSize` with
[getRowHeight()](./row-height/#getrowheight-callback) callback (to have different
rows with different heights) then the page height will be calculated using the default row height and not
the actual row heights. Therefore the rows will not fit perfectly into the page if these features are mixed.
{% /note %}

{% note %}
When `paginationAutoPageSize` is used, the grid will not show the page size dropdown selector in the pagination panel,
and the option `paginationPageSizeSelector` will be ignored.
{% /note %}

## Example: Customising Pagination

In this example the default pagination settings are changed. Note the following:

* `paginationPageSizeSelector` is set to `[200, 500, 1000]`
* `paginationPageSize` is set to `500`
* The numbers in the pagination panel are formatted differently using the grid callback `paginationNumberFormatter` and putting the numbers into square brackets i.e. \[x].
* `api.paginationGoToPage(4)` is called to go to page 4 (0 based, so the 5th page)

{% gridExampleRunner title="Custom Paging" name="custom-paging" /%}

## Example: Custom Pagination Controls

If you set `suppressPaginationPanel=true`, the grid will not show the standard navigation controls for pagination. This is useful if you want to provide your own navigation controls.

In the example below you can see how this works. Note that we are listening to `onPaginationChanged` to update the information about the current pagination status. We also call methods on the pagination API to change the pagination state.

The example also shows how the grid handles the case where the requested page doesn't exist. In this case, when the users requests page 50, the grid will show the last page (page 18 in this example).

A summary of the API methods and events can be found at the top of this documentation page.

The example also sets property `suppressScrollOnNewData=true`, which tells the grid to NOT scroll to the top when the page changes.

{% gridExampleRunner title="Custom Controls" name="custom-controls" /%}

## Pagination & Child Rows

Both [Row Grouping](./grouping/) and [Master Detail](./master-detail/) have rows that expand. When this happens, consideration needs to be given as to how this impacts the number of rows on the page. There are two modes of operation that can be used depending on what your application requirements.

### Mode 1: Paginate Only Top Level Rows

The first mode is the default. The rows are split according to the top level rows. For example if row grouping with a page size of 10, then each page will contain 10 top level groups. When expanding a group with this mode, all children for that group, along with the 10 original groups for that page, will get displayed in one page. This will result in a page size greater than the initial page size of 10 rows.

This mode is typically best suited for Row Grouping as children are always displayed alongside the parent group. It is also typically best for Master Detail, as detail rows (that typically contain detail tables) will always appear below their master rows.

In the example below, note the following:

* Each page will always contain exactly 10 groups.
* Expanding a group will not push rows to the next page.

{% gridExampleRunner title="Grouping Normal" name="grouping-normal"  exampleHeight=530 /%}

### Mode 2: Paginate All Rows, Including Children

The second mode paginates all rows, including child rows when Row Grouping and detail rows with Master Detail. For example if row grouping with a page size of 10, then each page will always contain exactly 10 rows, even if it means having children appear on a page after the page containing the parent. This can be particularly confusing if the last row of a page is expanded, as the children will appear on the next page (not visible to the user unless they navigate to the next page).

This modes is typically best if the application never wants to exceed the maximum number of rows in a page past the page size. This can be helpful if designing for touch devices (e.g. tablets) where UX requirements state no scrolls should be visible in the application - paging to a strict page size can guarantee no vertical scrolls will appear.

To enable pagination on all rows, including children, set grid property `paginateChildRows=true`.

In the example below, note the following:

* Each page will always contain exactly 10 rows (not groups).
* Expanding a group will push rows to the next page to limit the total number of rows to 10.

{% note %}
When `paginateChildRows=true` the Grid automatically disables Group Rows Sticky, see: [suppressGroupRowsSticky](./grid-options/#reference-rowGrouping-suppressGroupRowsSticky).
{% /note %}

{% gridExampleRunner title="Grouping Paginate Child Rows" name="grouping-paginate-child-rows"  exampleHeight=530 /%}

### Fallback to Mode 2

If using either of the following features, the grid will be forced to use the second mode:

* [Hide Open Parents](./grouping-multiple-group-columns/#hiding-expanded-parent-rows)
* [Hiding Parents of Individual Rows](./grouping-data/#hiding-parents-of-individual-rows)

This is because both of these features remove top level rows (group rows and master rows) from the displayed rows, making it impossible to paginate based on the top level rows only.

## Pagination Properties

{% apiDocumentation source="grid-options/properties.json" section="pagination" /%}

The following methods compose the pagination API are all available from `api`

## Pagination API

{% apiDocumentation source="grid-api/api.json" section="pagination" /%}

## Pagination Callbacks

{% apiDocumentation source="grid-options/properties.json" section="pagination" names=["paginationNumberFormatter"] /%}

## Pagination Events

{% apiDocumentation source="grid-events/events.json" section="pagination" names=["paginationChanged"] /%}
