---
title: "Row Grouping - Sorting"
enterprise: true
---
This section provides details on how to configure and customise how row groups are sorted.

## Sorting Row Groups

Row Groups are [Sorted](./row-sorting/) by the column that they are grouped by, and use any [Custom Sorting](./row-sorting/#custom-sorting)
configured on that column. Applying a sort to a group column generated by `groupDisplayType` will apply the sort to the row grouped columns it
represents.

{% gridExampleRunner title="Mixed Group Sort" name="mixed-group-sort" /%}

The example above demonstrates that sorting the `country` and `year` columns will sort the row groups, and clicking to sort the `Group` column
applies sorting to the `country` and `year` columns.

{% note %}
When using `groupDisplayType` with a [Single Group Column](./grouping-single-group-column/) and the columns with row grouping applied have
different sort directions, the group column will instead display the mixed sort icon.
{% /note %}

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: 'country', rowGroup: true, sort: 'desc' },
        { field: 'year', rowGroup: true, sort: 'asc' },
        // ...other column definitions
    ],
    groupDisplayType: 'singleColumn',
}
```

## Custom Row Group Sorting

The generated Group Columns can be unlinked from the columns with row grouping by configuring
[Custom Group Sorting](./row-sorting/#custom-sorting) using a `autoGroupColumnDef.comparator`. This allows custom sorting
to be applied across all levels of row grouping.

{% gridExampleRunner title="Custom Group Sort" name="custom-group-sort" /%}

{% note %}
When using custom group sorting, sorting the `Group` column no longer impacts the columns with row grouping, and vice versa.
{% /note %}


The example above demonstrates a configuration which ignores the data entirely, preferring to sort the rows by the number of descendants:
```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: 'country', rowGroup: true },
        { field: 'year', rowGroup: true },
        // ...other column definitions
    ],
    autoGroupColumnDef: {
        comparator: (valueA, valueB, nodeA, nodeB) => {
            return nodeA.allLeafChildren.length - nodeB.allLeafChildren.length;
        },
    },
}
```

## Maintain Group Order

When sorting on non-group columns it may be desirable to maintain the existing group order. This behaviour can be
enabled through the `groupMaintainOrder` grid option as shown below:

```{% frameworkTransform=true spaceBetweenProperties=true %}
const gridOptions = {
    columnDefs: [
        { field: 'assignee', rowGroup: true, hide: true },
        { field: 'priority', rowGroup: true, hide: true },        
        { field: 'task' },      
    ],
    groupDisplayType: 'multipleColumns',
    // preserves current group order when sorting on non-group columns
    groupMaintainOrder: true,
}
```

Note that [Group Order](./grouping-group-order/) is not the same as sorting. Maintaining group order will not preserve
active group sorts, just the current order of the groups. However, when sorting on group columns the group order will
be changed based on the sort.

The following example demonstrates how `groupMaintainOrder` works. Note the following:

* `groupMaintainOrder = true` is defined on the grid options supplied to the grid.
* Clicking on the 'Task' column header only sorts the tasks without reordering the groups.
* Sorting on the 'Assignee' or 'Priority' group column headers will reorder the groups.

{% gridExampleRunner title="Maintain Group Order" name="maintain-group-order"  exampleHeight=515 /%}

## Next Up

Continue to the next section to learn about [Filtering Groups](./grouping-filtering/).
