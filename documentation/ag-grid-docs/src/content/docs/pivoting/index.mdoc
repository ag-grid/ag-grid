---
title: "Pivoting"
enterprise: true
---

Pivoting breaks down data in an additional dimension.

## Simple Pivot

In the following example, the rows are [Grouped](./grouping) on the `Country` column and [Aggregated](./aggregation) to total the number of `Gold` medals won by each country.

Pivot mode has then been enabled by setting the grid option `pivotMode: true`. Pivoting is then applied to the `Sport` column values which generates a pivot result column showing the total number of `Gold` medals won by each country in each sport.

{% gridExampleRunner title="Simple Example" name="simple" /%}

Note that the majority of the configuration for pivoting is applied to the column definitions. The example above uses the following configuration:

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: 'country', rowGroup: true },
        { field: 'gold', aggFunc: 'sum' },
        { field: 'sport', pivot: true },
    ],
    pivotMode: true,
};
```

## Configuring via the UI

Pivoting is often controlled by end users rather than configured by developers. The grid provides some UI options for users to control these settings.

### Using the Side Bar

The [Side Bar](./side-bar) is the most common control for pivoting as it allows users to toggle pivot mode (equivalent to the grid option `pivotMode`), as well as
setting the [Row Grouped](./grouping), [Aggregated](./aggregation) and pivoted columns via right click context menus or drag and drop.

{% gridExampleRunner title="Side Bar" name="side-bar" /%}

In the example above, the `Sport` column is configured with `enablePivot: true`. This enables users to pivot by the column using UI controls, for example
when right clicking the column in the side bar, the option to add `Sport` to labels becomes available.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        // ...other column definitions
        { field: 'sport', enablePivot: true },
    ],
    sideBar: true,
    pivotMode: true,
};
```

Refer to the [Column Tool Panel](./tool-panel-columns/) documentation for more information on configuring the [Side Bar](./side-bar).

### Enabling the Pivot Panel

The pivot panel is an alternative UI control for allowing users to control pivot columns. It is a panel attached to the top of the grid similar to the [Row Group Panel](./grouping-group-panel)
allowing users to reorder, remove, or add pivot columns via drag and drop.

The example below demonstrates the pivot panel alongside a [Column Tool Panel](./tool-panel-columns/) which has been configured to increase the available space in the [Side Bar](./side-bar) by hiding the pivoting section.

{% gridExampleRunner title="Enabling Pivot Panel" name="pivot-panel"  /%}

The example above uses the following configuration to only show the pivot panel while pivoting is active:

```{% frameworkTransform=true %} 
const gridOptions = {
    columnDefs: [
        // ...other column definitions
        { field: 'sport', pivot: true, enablePivot: true },
        { field: 'year', pivot: true, enablePivot: true },
    ],
    pivotMode: true,
    pivotPanelShow: 'onlyWhenPivoting',
};
```

## Pivot Result Columns

Pivot Result Columns are the columns generated by the grid when pivoting is applied. Every aggregated column will result in one pivot result column being created for every unique permutation of pivot values.

### Column Definitions

Pivot Result Columns inherit [Column Definitions](./column-definitions) from the value column that they were created from. It is also possible to extend this definition further using the `processPivotResultColDef` grid option.

{% apiDocumentation source="grid-options/properties.json" section="rowPivoting" names=["processPivotResultColDef"] /%}

In the example below, the `Gold` column has `cellStyle: { backgroundColor: 'gold' }` applied, this is then inherited by the pivot result columns, making all of the `sum(Gold)` columns have a gold background.

The grid option `processPivotResultColDef` is then also used, which sets the text colour of the pivot result columns to red.

{% gridExampleRunner title="Column Definitions Example" name="column-definitions-example"  /%}

The example above uses the following configuration to both inherit and modify column definitions on the pivot result columns:

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        // ...other column definitions
        { field: 'gold', aggFunc: 'sum', cellStyle: { backgroundColor: 'gold' } },
    ],
    pivotMode: true,
    processPivotResultColDef: (colDef) => {
        colDef.cellStyle.color = 'red'; // the params are mutated directly, not returned
    },
}
```

### Ordering Columns

Pivot Result Columns are ordered within their groups based on the order of the value columns, either from the column definitions or user input.

By default, the current column order is preserved when new columns are added by changes in the underlying data or changes in filtering.
Any new columns will be applied at the end of the grid, however the grid option `maintainColumnOrder` can be set to `'none'` or `'primaryColumns'` to instead prioritise
strict order over preserving the users order.

Refer to the [Maintain Column Order](./column-updating-definitions/#maintain-column-order) documentation for more information.

### Prevent Extreme Column Generation

When pivoting, changes in data, aggregation or pivot columns can cause the number of generated columns to scale exponentially.
This can cause performance issues such as long delays in rendering, and often the resulting view would be unmanageable for the user.

To prevent this from happening, you can set the `pivotMaxGeneratedColumns` option. When the grid generates a number of pivot columns
exceeding this value, it halts column generation, clears the view, and fires the `onPivotMaxColumnsExceeded` event to allow your
application to intervene.

{% gridExampleRunner title="Extreme Pivot Handling" name="extreme-pivot" /%}

In the example above, pivoting by the `Athlete` column will instead trigger the `pivotMaxColumnsExceeded` event, which logs an error in the browser console.

The example above demonstrates the following configuration;
```{% frameworkTransform=true %}
const gridOptions = {
    pivotMode: true,
    pivotMaxGeneratedColumns: 1000,
    onPivotMaxColumnsExceeded: () => {
        console.error(
            'The limit of 1000 generated columns has been exceeded. Either remove pivot or aggregations from some columns or increase the limit.'
        );
    },
}
```


## Pivot Column Groups

Multiple group columns will be shown in the grid when there is more than one active pivot column. These columns can be collapsed,
expanded or fixed as described in the sections below:

### Customising Group Definitions

Pivot Result Column Group definitions can be configured by using the `processPivotResultColGroupDef` grid option.

{% apiDocumentation source="grid-options/properties.json" section="rowPivoting" names=["processPivotResultColGroupDef"] /%}

In the example below, the `processPivotResultColGroupDef` callback is used to apply a class to the group header cells,
which is subsequently used to style them with a golden background.

{% gridExampleRunner title="Column Group Definitions Example" name="column-group-definitions-example"  /%}

The example above demonstrates the following configuration for applying a class to the group header cells:
```{% frameworkTransform=true %}
const gridOptions = {
    pivotMode: true,
    processPivotResultColGroupDef: (colDef) => {
        colDef.headerClass = 'pivot-gold'; // the params are mutated directly, not returned
    },
}
```

### Ordering Groups

The pivot result groups are initially displayed in alphabetical order, however, you can change this by providing a `pivotComparator` function to the pivoted columns definition.

{% apiDocumentation source="column-properties/properties.json" section="pivoting" names=["pivotComparator"] /%}

In the example below, note that a `pivotComparator` has been supplied to the `sport` column, and the groups are instead sorted in reversed alphabetical order.

{% gridExampleRunner title="Ordering Pivot Groups" name="order-pivot-groups" /%}

The example above demonstrates the following configuration for modifying the resulting order of groups:
```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        // ...other column definitions
        {
            field: 'sport',
            pivot: true,
            pivotComparator: (a, b) => b.localeCompare(a),
        },
    ],
    pivotMode: true,
}
```

### Group Totals

When pivoting by multiple columns the grid will automatically insert a total column representing the total for each aggregation for that group level.
These columns are by default only displayed when the column group is closed.

The example below demonstrates that when collapsed, group totals are displayed for each sport. When expanded, these are hidden and instead display the break-down per year.

{% gridExampleRunner title="Expandable Pivot Column Groups" name="expandable-pivot-column-groups" /%}

### Expanded by Default

Pivot Column Groups can be configured to expand by default, down to a given depth. This depth can be configured using the `pivotDefaultExpanded` grid option.

The following example demonstrates `pivotDefaultExpanded` being used to expand the first pivot group level by default. Providing `-1` will expand all pivot group levels by default.

{% gridExampleRunner title="Open Pivot Group By Default" name="open-pivot-group-by-default" /%}

The example above demonstrates the following configuration for expanding pivot groups by default:
```{% frameworkTransform=true %}
const gridOptions = {
    pivotDefaultExpanded: 1,
}
```

### Prevent Expanding Groups

When using multiple pivot columns, groups become expandable by default. To prevent this and instead always show all columns, set the grid option `suppressExpandablePivotGroups=true`.

{% gridExampleRunner title="Fixed Pivot Column Groups" name="fixed-pivot-column-groups" /%}

The example above demonstrates the following configuration:
```{% frameworkTransform=true %}
const gridOptions = {
    pivotMode: true,
    suppressExpandablePivotGroups: true,
}
```

### Hide Group with Single Value Column

When pivoting with only one aggregated column, it can simplify the grid to omit the groups with only one child.
Enabling the grid option `removePivotHeaderRowWhenSingleValueColumn=true`, when set to `true` will instead skip the group and
use the pivot keys to label the pivot result column instead.

{% gridExampleRunner title="Hiding Repeated Column Labels" name="hidden-single-value-column-header" /%}

The example above demonstrates the following configuration:
```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: 'country', rowGroup: true },
        { field: 'sport', pivot: true },
        { field: 'gold', aggFunc: 'sum' },
    ],
    pivotMode: true,
    removePivotHeaderRowWhenSingleValueColumn: true,
};
```


## Filtering

When pivot mode is enabled, you may also [Filter](./filtering-overview/) on the pivot result columns.

{% gridExampleRunner title="Filtering Pivot Result Columns" name="secondary-columns-filter" /%}

As pivot values are all aggregates, filtering out rows will not re-aggregate the parent rows. Refer to [Filtering Group Aggregations](./aggregation-filtering/#filtering-group-aggregations) for more information.

{% note %}
Pivot result columns inherit the properties of the value column from which they are generated, however, setting `filter: true` will instead
default to a [Number Filter](./filter-number/) in the case of a pivot result column. The [Set Filter](./filter-set/) cannot be used for filtering pivot result columns.
{% /note %}

## Row Totals

It is possible to include [Group Totals](./pivoting/#group-totals) for the entire grid, to show the total aggregation for each value column. This can be configured
by setting the grid option `pivotRowTotals` to `'before'` or `'after'` (determining the inserted total columns position in the grid).

{% gridExampleRunner title="Pivot Row Totals" name="row-totals" /%}

The example above demonstrates the following configuration for adding an additional `Gold` row total at the start of the grid:
```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        // ...other column defs
        { field: 'gold', aggFunc: 'sum' },
    ],
    pivotMode: true,
    pivotRowTotals: 'before',
}
```

## Pivot API

{% apiDocumentation source="grid-api/api.json" section="Pivoting" /%}