---
title: "Pivot Result Columns"
enterprise: true
---

Customise the columns generated by the grid when pivoting.

## Pivot Result Columns

Pivot Result Columns are the columns generated by the grid when pivoting is applied. Every aggregated column will result in one pivot result column being created for every unique permutation of pivot values.

### Column Definitions

Pivot Result Columns inherit [Column Definitions](./column-definitions) from the value column that they were created from. It is also possible to extend this definition further using the `processPivotResultColDef` grid option.

{% apiDocumentation source="grid-options/properties.json" section="rowPivoting" names=["processPivotResultColDef"] /%}

In the example below, the `Gold` column has `cellStyle: { backgroundColor: 'gold' }` applied, this is then inherited by the pivot result columns, making all of the `sum(Gold)` columns have a gold background.

The grid option `processPivotResultColDef` is then also used, which sets the text colour of the pivot result columns to red.

{% gridExampleRunner title="Column Definitions Example" name="column-definitions-example"  /%}

The example above uses the following configuration to both inherit and modify column definitions on the pivot result columns:

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        // ...other column definitions
        { field: 'gold', aggFunc: 'sum', cellStyle: { backgroundColor: 'gold' } },
    ],
    pivotMode: true,
    processPivotResultColDef: (colDef) => {
        colDef.cellStyle.color = 'red'; // the params are mutated directly, not returned
    },
}
```

### Ordering Columns

Pivot Result Columns are ordered within their groups based on the order of the value columns, either from the column definitions or user input.

By default, the current column order is preserved when new columns are added by changes in the underlying data or changes in filtering.
Any new columns will be applied at the end of the grid, however the grid option `maintainColumnOrder` can be set to `'none'` or `'primaryColumns'` to instead prioritise
strict order over preserving the users order.

Refer to the [Maintain Column Order](./column-updating-definitions/#maintain-column-order) documentation for more information.

### Prevent Extreme Column Generation

When pivoting, changes in data, aggregation or pivot columns can cause the number of generated columns to scale exponentially.
This can cause performance issues such as long delays in rendering, and often the resulting view would be unmanageable for the user.

To prevent this from happening, you can set the `pivotMaxGeneratedColumns` option. When the grid generates a number of pivot columns
exceeding this value, it halts column generation, clears the view, and fires the `onPivotMaxColumnsExceeded` event to allow your
application to intervene.

{% gridExampleRunner title="Extreme Pivot Handling" name="extreme-pivot" /%}

In the example above, pivoting by the `Athlete` column will instead trigger the `pivotMaxColumnsExceeded` event, which logs an error in the browser console.

The example above demonstrates the following configuration;
```{% frameworkTransform=true %}
const gridOptions = {
    pivotMode: true,
    pivotMaxGeneratedColumns: 1000,
    onPivotMaxColumnsExceeded: () => {
        console.error(
            'The limit of 1000 generated columns has been exceeded. Either remove pivot or aggregations from some columns or increase the limit.'
        );
    },
}
```

### Filtering

When pivot mode is enabled, you may also [Filter](./filtering-overview/) on the pivot result columns.

{% gridExampleRunner title="Filtering Pivot Result Columns" name="secondary-columns-filter" /%}

As pivot values are all aggregates, filtering out rows will not re-aggregate the parent rows. Refer to [Filtering Group Aggregations](./aggregation-filtering/#filtering-group-aggregations) for more information.

{% note %}
Pivot result columns inherit the properties of the value column from which they are generated, however, setting `filter: true` will instead
default to a [Number Filter](./filter-number/) in the case of a pivot result column. The [Set Filter](./filter-set/) cannot be used for filtering pivot result columns.
{% /note %}