---
title: "Pivot Result Columns"
enterprise: true
---

Pivoting results in columns being generated by the grid. Every aggregated column will result in one pivot result column being created for every unique permutation of pivot values.

{% gridExampleRunner title="Pivot Result Column Summary Example" name="pivot-result-summary"  /%}

## Column Definitions

Pivot Result Columns inherit [Column Definitions](./column-definitions) from the value column that they were created from. It is also possible to extend this definition further
to specifically customise pivot result columns using the `processPivotResultColDef` grid option.

{% apiDocumentation source="grid-options/properties.json" section="rowPivoting" names=["processPivotResultColDef"] /%}

In the example below, the `Gold` column has `cellStyle: { backgroundColor: 'gold' }` applied, this is then inherited by the pivot result columns,
making all of the `sum(Gold)` columns have a gold background. Note that the `Silver` column does not have this background so neither do the `sum(Silver)` columns.

The grid option `processPivotResultColDef` is then also used, which sets the text colour of all the pivot result columns to red.

{% gridExampleRunner title="Column Definitions Example" name="column-definitions-example"  /%}

The example above uses the following configuration to both inherit and modify column definitions on the pivot result columns:

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        // ...other column definitions
        { field: 'gold', aggFunc: 'sum', cellStyle: { backgroundColor: 'gold' } },
        { field: 'silver', aggFunc: 'sum', cellStyle: {} },
    ],
    pivotMode: true,
    processPivotResultColDef: (colDef) => {
        colDef.cellStyle.color = 'red'; // the params are mutated directly, not returned
    },
}
```

## Filtering

When pivot mode is enabled, you can [Filter](./filtering-overview/) on the pivot result columns by setting the `filter` attribute on your value column.

{% gridExampleRunner title="Filtering Pivot Result Columns" name="secondary-columns-filter" /%}

As pivot values are all aggregates, filtering out rows will not re-aggregate the parent rows. Refer to [Filtering Group Aggregations](./aggregation-filtering/#filtering-group-aggregations) for more information.

{% note %}
Pivot result columns inherit the properties of the value column from which they are generated, however, setting `filter: true` will instead
default to a [Number Filter](./filter-number/) in the case of a pivot result column. The [Set Filter](./filter-set/) cannot be used for filtering pivot result columns.
{% /note %}

### Filtering Primary Columns

When pivoting is active, filters can be applied to columns defined within the column definitions through
the [Filters Tool Panel](./tool-panel-filters/) and the [Filter API](./grid-api/#reference-filter).

In the example below, note how you can use the Filters Tool Panel to filter the 'Country', 'Year', or 'Sport' columns. These filters are applied to
the data prior to pivoting and as such a change in these filters can effect not only the resulting values and rows, but also the columns generated from the pivot.

{% gridExampleRunner title="Filtering Tool Panel" name="filter-tool-panel" /%}

## Best Practices

### Limiting Column Generation

When pivoting, changes in data, aggregation or pivot columns can cause the number of generated columns to scale exponentially.
This can cause performance issues such as long delays in rendering, and often the resulting view would be unmanageable for the user.

To prevent this from happening, you can set the `pivotMaxGeneratedColumns` option. When the grid generates a number of pivot columns
exceeding this value, it halts column generation, clears the view, and fires the `onPivotMaxColumnsExceeded` event to allow your
application to intervene.

{% gridExampleRunner title="Extreme Pivot Handling" name="extreme-pivot" /%}

In the example above, pivoting by the `Athlete` column will instead trigger the `pivotMaxColumnsExceeded` event, which logs an error in the browser console.

The example above demonstrates the following configuration;
```{% frameworkTransform=true %}
const gridOptions = {
    pivotMode: true,
    pivotMaxGeneratedColumns: 1000,
    onPivotMaxColumnsExceeded: () => {
        console.error(
            'The limit of 1000 generated columns has been exceeded. Either remove pivot or aggregations from some columns or increase the limit.'
        );
    },
}
```

## Next Up

Continue to the next section to learn about how pivoting on more than one column generates [Pivot Group Columns](./pivoting-column-groups/).