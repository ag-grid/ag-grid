---
title: "Grid State"
---

This section covers saving and restoring the grid state, such as the filter model, selected rows, etc.

## Saving and Restoring State

{% gridExampleRunner title="Grid State" name="grid-state"  exampleHeight=630 /%}

The initial state is provided via the grid option `initialState`. It is only read once when the grid is created.

```{% frameworkTransform=true %}
const gridOptions = {
    initialState: {
        filter: {
            filterModel: { 
                year: {
                    filterType: 'set',
                    values: ['2012'],
                }
            }
        },
        columnVisibility: {
            hiddenColIds: ['athlete'],
        },
        rowGroup: {
            groupColIds: ['athlete'],
        }
    }
}
```

The current grid state can be retrieved by listening to the state updated event, which is fired with the latest state when it changes, or via `api.getState()`.

The state is also passed in the [Grid Pre-Destroyed Event](./grid-lifecycle/#grid-pre-destroyed), which can be used to get the state when the grid is destroyed.

{% apiDocumentation source="grid-events/events.json" section="miscellaneous" names=["stateUpdated", "gridPreDestroyed"] /%}

## State Contents

The following is captured in the grid state:

* [Aggregation Functions](./aggregation/) (column state)
* [Opened Column Groups](./column-groups/)
* [Column Order](./column-moving/) (column state)
* [Pinned Columns](./column-pinning/) (column state)
* [Column Sizes](./column-sizing/) (column state)
* [Hidden Columns](./column-properties/#reference-display-hide) (column state)
* [Column Filter Model](./filtering/)
* [Advanced Filter Model](./filter-advanced/#filter-model--api)
* [Focused Cell](./keyboard-navigation/) ([Client-Side Row Model](./row-models/) only)
* [Current Page](./row-pagination/)
* [Pivot Mode and Columns](./pivoting/) (column state)
* [Cell Selection](./cell-selection/)
* [Row Group Columns](./grouping/) (column state)
* [Expanded Row Groups](./grouping-opening-groups/)
* [Row Selection](./row-selection/)
* [Side Bar](./side-bar/)
* [Sort](./row-sorting/) (column state)

{% note %}
When restoring the current page using the [Server Side Row Model](./server-side-model/) or [Infinite Row Model](./infinite-scrolling/),
additional configuration is required:

* For the Server Side Row Model - set the `serverSideInitialRowCount` property to a value which includes the rows to be shown.
* For the Infinite Row Model - set the `infiniteInitialRowCount` property to a value which includes the rows to be shown.

{% /note %}

All state properties are optional, so a property can be excluded if you do not want to restore it.

If applying some but not all of the column state properties, then `initialState.partialColumnState` must be set to `true`.

The state also contains the grid version number. When applying state with older version numbers, any old state properties will be automatically migrated to the current format.

{% interfaceDocumentation interfaceName="GridState" /%}
