---
title: "Filter Component"
---

{% if isFramework("javascript", "angular", "vue") %}
Filter components allow you to add your own filter types to AG Grid. Use them when the Provided Filters do not meet your requirements.
{% /if %}

{% if isFramework("react") %}
{% videoSection id="98JVaTcoexc" title="React Custom Filter Components" showHeader=true %}
Filter components allow you to add your own filter types to AG Grid. Use them when the Provided Filters do not meet your requirements.
{% /videoSection %}
{% /if %}

The example below shows two custom filters. The first is on the `Athlete` column and demonstrates a filter with "fuzzy" matching and the second is on the `Year` column with preset options.

{% gridExampleRunner title="Filter Component" name="custom-filter" /%}

## Implementing a Filter Component

{% partial file="./_component-interface-javascript.mdoc" /%}
{% partial file="./_component-interface-angular.mdoc" /%}
{% partial file="./_component-interface-react.mdoc" /%}
{% partial file="./_component-interface-vue.mdoc" /%}

## Custom Filter Parameters

{% if isFramework("javascript") %}
The `init(params)` method takes a params object with the items listed below. If custom params are provided via the `colDef.filterParams` property, these
will be additionally added to the params object, overriding items of the same name if a name clash exists.
{% /if %}

{% if isFramework("angular") %}
The `agInit(params)` method takes a params object with the items listed below. If custom params are provided via the `colDef.filterParams` property, these
will be additionally added to the params object, overriding items of the same name if a name clash exists.
{% /if %}

{% if isFramework("vue") %}
When a Vue component is instantiated the grid will make the grid APIs, a number of utility methods as well as the cell and
row values available to you via `this.params` - the interface for what is provided is documented below.

If custom params are provided via the `colDef.filterParams` property, these
will be additionally added to the params object, overriding items of the same name if a name clash exists.
{% /if %}

{% if isFramework("javascript", "angular", "vue") %}
{% interfaceDocumentation interfaceName="IFilterParams" /%}
{% /if %}

{% if isFramework("javascript", "angular", "vue") %}
### IDoesFilterPassParams

The method `doesFilterPass(params)` takes the following as a parameter:
{% /if %}

{% if isFramework("javascript", "angular", "vue") %}
{% interfaceDocumentation interfaceName="IDoesFilterPassParams" /%}
{% /if %}

{% if isFramework("react") %}
### Filter Props

The following props are passed to the custom filter components (`CustomFilterProps` interface). If custom props are provided via the `colDef.filterParams` property, these will be additionally added to the props object, overriding items of the same name if a name clash exists.
{% /if %}

{% if isFramework("react") %}
{% interfaceDocumentation interfaceName="CustomFilterProps" config={ "description": "" } /%}
{% /if %}

{% if isFramework("react") %}
### Filter Callbacks

The following callbacks can be passed to the `useGridFilter` hook (`CustomFilterCallbacks` interface). The hook must be used for filters to work. The `doesFilterPass` callback is mandatory, but all others are optional.

Note that `doesFilterPass` is only called with the [Client-Side Row Model](./row-models/). If being used exclusively with other row models, it can just return `true` as the filtering logic is performed on the server.
{% /if %}

{% if isFramework("react") %}
{% interfaceDocumentation interfaceName="CustomFilterCallbacks" config={ "description": "" } /%}
{% /if %}

## Associating Floating Filter

If you create your own filter you have two options to get floating filters working for that filter:

1. You can create your own [Custom Floating Filter](./component-floating-filter/).
1. You can implement the `getModelAsString()` method in your custom filter. If you implement this method and don't provide a custom floating filter, AG Grid will automatically provide a read-only version of a floating filter. See [Custom Filter And Read-Only Floating Filter](./component-floating-filter/#example-custom-filter-and-read-only-floating-filter).

If you don't provide either of these two options for your custom filter, the display area for the floating filter will be empty.

## Custom Filters Containing a Popup Element

Sometimes you will need to create custom components for your filters that also contain popup elements. This is the case for Date Filter as it pops up a Date Picker. If the library you use anchors the popup element outside of the parent filter, then when you click on it the grid will think you clicked outside of the filter and hence close the column menu.

There are two ways you can get fix this problem:

* Add a mouse click listener to your floating element and set it to `preventDefault()`. This way, the click event will not bubble up to the grid.
  This is the best solution, but you can only do this if you are writing the component yourself.
* Add the `ag-custom-component-popup` CSS class to your floating element. An example of this usage can be found here: [Custom Date Component](./filter-date/#custom-selection-component)

## Accessing the Component Instance

{% if isFramework("angular", "vue", "javascript") %}
AG Grid allows you to get a reference to the filter instances via the `api.getColumnFilterInstance(colKey)` method.
{% /if %}

{% if isFramework("react") %}
AG Grid allows you to get a reference to the filter instances via `api.getColumnFilterInstance(colKey)`. This returns a wrapper component that matches the provided grid filter components that implement `IFilter`. To get the React custom filter component, the helper function `getInstance` can be used with this. As React components are created asynchronously, it is necessary to use a callback for both methods.
{% /if %}

{% if isFramework("angular") %}
```ts
// let's assume an Angular component as follows
@Component({
    selector: 'filter-cell',
    template: `
        Filter: <input style="height: 10px" #input (ngModelChange)="onChange($event)" [ngModel]="text">
    `
})
class PartialMatchFilterComponent implements IFilterAngularComp {
    ... // standard filter methods hidden

    // put a custom method on the filter
    myMethod() {
        // does something
    }
}

// later in your app, if you want to execute myMethod()...
laterOnInYourApplicationSomewhere() {
    // assume filter on name column
    api.getColumnFilterInstance<PartialMatchFilterComponent>('name').then(angularFilterInstance => {
        angularFilterInstance.myMethod();
    });
}
```
{% /if %}

{% if isFramework("react") %}
```ts
// let's assume a React component as follows
export default forwardRef((props, ref) => {
    useImperativeHandle(ref, () => {
        return {
            ... // required filter methods

            // put a custom method on the filter
            myMethod() {
                // does something
            }
        }
    });

    ... // rest of component
}

// later in your app, if you want to execute myMethod()...
laterOnInYourApplicationSomewhere() {
    // get reference to the AG Grid Filter component on name column
    api.getColumnFilterInstance('name').then(filterInstance => {
        getInstance(filterInstance, comp => if (comp != null) {
            comp.myMethod();
        });
    });
}
```
{% /if %}

{% if isFramework("vue") %}
```ts
// let's assume a VueJS component as follows
export default {
    template: `<input style="height: 20px" :ref="'input'" v-model="text">`,
    data() {
        ...data
    },
    methods: {
        myMethod() {
            // does something
        },
        ...other methods
    },

    // later in your app, if you want to execute myMethod()...
    laterOnInYourApplicationSomewhere() {
        // assume filter on name column
        api.getColumnFilterInstance('name').then(filterInstance => {
            filterInstance.myMethod();
        });
    }
```
{% /if %}

The example below illustrates how a custom filter component can be accessed and methods on it invoked:

{% gridExampleRunner title="Filter Component Instance" name="filter-component"  exampleHeight=445 /%}
