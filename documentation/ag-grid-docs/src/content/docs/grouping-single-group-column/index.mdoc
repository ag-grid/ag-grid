---
title: "Row Grouping - Single Column"
enterprise: true
---
Display the group structure with a single generated column in the grid.

{% gridExampleRunner title="Enabling Single Group Column" name="enabling-single-group-column" /%}

## Enabling a Single Group Column

The example above demonstrates that both `country` and `year` are grouped. Only a single group column is used to
display the group value cells.

The Single Group Column is enabled by default, but it can be set explicitly by setting the `groupDisplayType` grid option
to `"singleColumn"` as shown below:

```{% frameworkTransform=true %}
const gridOptions = {
    groupDisplayType: 'singleColumn',
}
```

## Configuring the Column

The Single Group Column is added to the grid when row grouping is present, and can be configured via the `autoGroupColumnDef` grid
option.

{% gridExampleRunner title="Single Group Column Configuration" name="single-group-column-configuration" /%}

The example above uses the configuration demonstrated below to change the columns header name and apply a minimum width.
It also [Configures the Group Cell Component](./group-cell-renderer/) using the `cellRendererParams` option to add checkboxes and remove
the count from each row group.

```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        headerName: 'My Group',
        minWidth: 220,
        cellRendererParams: {
            suppressCount: true,
            checkbox: true,
        }
    },
}
```

## Cell Renderer
The column uses the `agGroupCellRenderer` component to display the group information, as well as the chevron control
for expanding and collapsing rows. The renderer also embeds the grouped columns renderer and displays this inside of the group cell.

This can be configured with several [Group Renderer Properties](./grouping-single-group-column/#configurable-properties-reference) using
the `autoGroupColumnDef` property `cellRendererParams`. The example below removes the row count and enables checkboxes for row selection.

{% gridExampleRunner title="Group Cell Renderer Configuration" name="renderer-config-group-cell" /%}

The example above demonstrates the following configuration:
```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: 'total', rowGroup: true, cellRenderer: CustomMedalCellRenderer },
        // ... other column definitions
    ],
    autoGroupColumnDef: {
        cellRendererParams: {
            suppressCount: true,
            checkbox: true,
        }
    },
}
```

### Configurable Options

{% interfaceDocumentation interfaceName="IGroupCellRendererParams" overrideSrc="group-cell-renderer/group-cell-renderer.json" config={ "description": "" } /%}

### Custom Inner Renderer

When using the group cell renderer, the `agGroupCellRenderer` component will inherit the grouped columns renderer and display this inside of the group cell,
adjacent to any configured checkboxes, cell count, and the expand/collapse chevron control.

This inner renderer can be overridden with a [Custom Cell Component](./component-cell-renderer/) by setting the `innerRenderer` and `innerRendererParams` properties
on the `cellRendererParams` configuration.

{% gridExampleRunner title="Group Cell Renderer Configuration" name="renderer-config-inner" /%}

The example above uses the following configuration to provide a custom inner renderer to the group column:
```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        cellRendererParams: {
            innerRenderer: CustomMedalCellRenderer,
        },
    },
}
```

### Custom Cell Renderer

The Group Cell Renderer can be entirely replaced with a [Custom Cell Component](./component-cell-renderer/) by setting the `cellRenderer`
property on the `autoGroupColumnDef` configuration.

{% gridExampleRunner title="Custom Group Cell Renderer" name="renderer-config-custom" /%}

{% note %}
It is also possible to [Determine Cell Renderers Dynamically](./component-cell-renderer/#dynamic-component-selection).
{% /note %}

## Group Column Filters

The grid filters leaf rows by default, if all of a groups children are filtered out, the group is also hidden.

### Inheriting Row Grouped Columns Filters

Applying filters to the columns with row grouping active impacts which row groups are displayed. The grid provides the `agGroupColumnFilter`
to allow users to filter the columns with row grouping enabled via the group column.

{% gridExampleRunner title="Group Column Filtering" name="filtering-grouped-columns" /%}

The example above demonstrates the following configuration to enable the group column filter:
```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        filter: 'agGroupColumnFilter',
        floatingFilter: true,
    },
}
```

### Tree Filter

The `agSetColumnFilter` can be used to filter the group column in a [Tree List](./filter-set-tree-list/), representing the hierarchy of
the row groups.

{% gridExampleRunner title="Hierarchical Set Filter" name="filtering-set-hierarchy" /%}

{% note %}
The tree filter needs a value for each leaf row. In absence of a `field` or `valueGetter` on the group column, provide a `filterValueGetter`
to the group column definition.
{% /note %}

The example above demonstrates the following configuration to enable the tree set filter:
```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        filter: 'agSetColumnFilter',
        filterValueGetter: (params) => params.data.athlete,
        filterParams: {
            treeList: true,
            keyCreator: (params) => (params.value ? params.value.join('#') : null),
        },
    },
}
```

Refer to the [Tree List Filter](./filter-set-tree-list/) documentation for further configuration options.

### Text Filtering

Providing a filter value getter to the group column allows for a simple string search of any group level.

{% gridExampleRunner title="Custom Group Column Filter" name="filtering-custom" /%}

The example above demonstrates using a filter value getter which returns an array of parent row keys. This enables searching for any group value
containing the filter text:
```{% frameworkTransform=true %}
const gridOptions = {
    autoGroupColumnDef: {
        filter: 'agTextColumnFilter',
        filterValueGetter: (params) => params.node.parent.getRoute(),
    },
}
```

## Next Up

Continue to the next section to learn about the [Multiple Group Columns](./grouping-multiple-group-columns/) display type.
