---
title: "Theming API"
---

Control the look and feel of the grid

The Theming API is a new JavaScript API for styling the grid. In the future it will become the primary way to style the grid. You can choose from our built-in themes, mix and match elements of different themes, and create themes visually using the [Theme Builder](/theme-builder).

{% note %}
Before v32.2 themes were applied by importing our CSS files and setting a class on the wrapper element e.g. `ag-theme-quartz`. The Theming API is an alternative to this technique, and the two cannot be combined on the same page. For more information see [Migrating to Theming API](./theming-migration/).
{% /note %}

## Key Concepts: Themes, Parts and Parameters

* **Parameters** are configuration values that affect the appearance of the grid. Some, such as `headerTextColor`, affect a single aspect of grid appearance. Others have a wider effect, such as `spacing` which adjusts padding across the whole grid.
* **Parts** contain the CSS styles for a single feature like icons or text inputs. We provide a choice of parts so that you can, for example, select a text input style that matches you application, or disable our provided text input styles so that you can write your own.
* **Themes** are preset configurations of parts and parameters. We provide built-in themes, and you can create your own.

## Built-in Themes

 * Quartz - Our default theme, with high contrast and generous padding.
 * Balham - A more traditional theme modelled after a spreadsheet application.
 * Alpine - The default theme before Quartz. We recommend quartz for new projects; this theme is intended to ease migration to the Theming API for
 applications already using Alpine.

{% gridExampleRunner title="Built-in themes" name="built-in-themes" /%}

### Importing a Built-in Theme

Themes are imported from `ag-grid-community` and provided to grid instances using the `theme` grid option.

```js
import { themeQuartz } from 'ag-grid-community';

{% if isFramework("javascript") %}
const gridOptions = {
    theme: themeQuartz,
    // Quartz uses the IBM Plex Sans font; load it from Google's CDN
    loadThemeGoogleFonts: true,
    ...
}
{% /if %}
{% if isFramework("react") %}
<AgGridReact
    theme={themeQuartz}
    // Quartz uses the IBM Plex Sans font; load it from Google's CDN
    loadThemeGoogleFonts
    ...
/>
{% /if %}
{% if isFramework("vue") %}
// in template
<ag-grid-vue
    :theme="theme"
    // Quartz uses the IBM Plex Sans font; load it from Google's CDN
    :loadThemeGoogleFonts="true"
    ...
></ag-grid-vue>

// in component setup hook
setup() {
    return {
        theme: themeQuartz,
        ...
    };
}
{% /if %}
{% if isFramework("angular") %}
// in template
<ag-grid-angular
    [theme]="theme"
    // Quartz uses the IBM Plex Sans font; load it from Google's CDN
    loadThemeGoogleFonts
/>

// in component class
public theme = themeQuartz;
{% /if %}
```

{% gridExampleRunner title="Basic Theming API Example" name="basic" /%}

## Setting Theme Parameters

Parameters are configuration values that affect the appearance of the grid. The `theme.withParams()` method generates a new theme with different default values for its params.

```js
const myTheme = themeQuartz.withParams({
    spacing: 12,
    accentColor: 'red',
});
```

{% gridExampleRunner title="Basic Theming API Example" name="with-params" /%}

Under the hood, theme parameters are implemented using CSS custom properties (variables), and `withParams()` sets _default_ values for these, so you can override them in your application stylesheets (see [Customising the grid with CSS](./theming-css/)). However using the API provides validation, typescript autocompletion, and an [extended syntax for defining CSS values](#extended-syntax-for-css-values).

### Finding Theme Parameters

There are many parameters available, and several ways of finding the right one to use:

1. **[Theme Builder](/theme-builder/)** - In the "All Parameters" section of the Theme Builder you can search for parameters and view documentation.
2. **TypeScript auto-complete** - When using an editor with TypeScript language support, you can see all available parameters with inline documentation.
3. **Dev tools** - When inspecting an element in the grid, the styles panel shows the CSS custom properties that are being used. A custom property `var(--ag-column-border)` corresponds to the theme parameter `columnBorder`.

### Extended Syntax for CSS Values

#### Length Values

Parameters that refer to on-screen measurements are length values. These will have suffixes like Width, Height, Padding, Spacing etc. They can accept any [valid CSS length value](https://developer.mozilla.org/en-US/docs/Web/CSS/length), including pixels (`10px`) and variable expressions (`var(--myLengthVar)`). In addition, the following syntax is supported:

| Syntax | Description |
|-|-|
| `4` | A number without units is assumed to be pixels |
| `{ ref: 'spacing' }` | Use the same value as the `spacing` parameter |
| `{ calc: '4 * spacing - 2px' }` | A CSS calc expression, mapping parameter names to the appropriate CSS custom property. This expression would map to the CSS string  `"calc(4 * var(--ag-spacing) - 2px)"`. Note that `-` is a valid character in CSS identifiers, so if you use it for subtraction then spaces are required around it. |

#### Color Values

All parameters ending "Color" are color values. These can accept any [valid CSS color value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value), including named colors (`red`), hex values (`#FF0000`) CSS functions (`rgb(255, 0, 0)`) and variable expressions (`var(--myColorVar)`). In addition, the following syntax is supported:

| Syntax | Description |
|-|-|
| `{ ref: 'accentColor' }` | Use the same value as the `accentColor` parameter |
| `{ ref: 'accentColor', mix: 0.25 }` | A mix of 25%, `accentColor` 75% transparent |
| `{ ref: 'accentColor', mix: 0.25, onto: 'backgroundColor' }` | A mix of 25%, `accentColor` 75% `backgroundColor` |

#### Border Values

All parameters ending "Border" are border values. These can accept any [valid CSS border value](https://developer.mozilla.org/en-US/docs/Web/CSS/border), such as `1px solid red` and variable expressions (`var(--myBorderVar)`). In addition, the following syntax is supported:

| Syntax | Description |
|-|-|
| `{ width: 2, style: 'dashed', color: 'blue' }` | An object with 3 optional properties. `width` can take any [length value](#length-values) and defaults to 1. `style` takes a [CSS border-style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style) string and defaults to "solid". `color` takes any [color value](#color-values) and defaults to `{ ref: 'borderColor' }` |
| `true` | The default border: `{width: 1, style: 'solid' { ref: 'borderColor' }` |
| `false` | A shorthand for `0` |

#### Shadow Values

All parameters ending "Shadow" are shadow values. These can accept any [valid CSS box-shadow value](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow), such as `2px 2px 4px 2px rgba(0, 0, 0, 0.5)` and variable expressions (`var(--myShadowVar)`). In addition, the following syntax is supported:

| Syntax | Description |
|-|-|
| `{ offsetX: 2, offsetY: 2, radius: 4, spread: 2, color: 'rgba(0, 0, 0, 0.5)' }` | An object with 5 optional properties. `offsetX`, `offsetY`, `radius` and `spread` take any [length value](#length-values) and default to 0. `color` takes any [color value](#color-values) and defaults to `{ ref: 'foregroundColor' }` |

#### Font Family Values

All parameters ending "FontFamily" are font family values. These can accept any [valid CSS font-family value](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family), such as `Arial, sans-serif` and variable expressions (`var(--myFontFamilyVar)`). In addition, the following syntax is supported:

| Syntax | Description |
|-|-|
| `{ googleFont: 'IBM Plex Sans' }` | A Google font. To prevent potential licensing and privacy implications of accidentally loading Google fonts, you must set the `loadThemeGoogleFonts` grid option to true. A warning will be logged to the console if this option is unset. |
| `['Arial', 'sans-serif']` | An array of fonts. Each item can be a string font name or a `{ googleFont: "..." }` object. The browser will attempt to use the first font and fall back to later fonts if the first one fails to load or is not available on the host system. |

#### Image Values

All parameters ending "Image" are image values. These can accept any [valid CSS image value](https://developer.mozilla.org/en-US/docs/Web/CSS/image), such as `url('https://example.com/my-image.png')` and variable expressions (`var(--myImageVar)`). In addition, the following syntax is supported:

| Syntax | Description |
|-|-|
| `{ url: 'https://example.com/my-image.png' }` | Load an image from a URL, or embed a PNG if converted to a data: URL |
| `{ svg: '<svg> ... SVG string ... </svg>' }` | Use an SVG source code string |

## Configuring Theme Parts

Parts are objects that contain the CSS styles for a single feature. A theme can only have one part for a given feature, so for example adding a `colorScheme` part will remove any existing `colorScheme` part.

The `theme.withPart(...)` method generates a new theme with the specified part:

```js
import { themeQuartz, colorSchemeDark, iconSetMaterial } from 'ag-grid-community';

// withPart() returns a new theme and calls can be chained
const myTheme = themeQuartz
    .withPart(iconSetMaterial)
    .withPart(colorSchemeDark);
```

This example demonstrates mixing and matching any built-in theme, icon set, and color scheme:

{% gridExampleRunner title="Configuring Theme Parts" name="configuring-theme-parts" /%}

### Parts Reference

The following parts are available:

* Color schemes:
    * `colorSchemeLight` - neutral light scheme
    * `colorSchemeLightCold` - light scheme with subtle cold tint used by Balham theme
    * `colorSchemeLightWarm` - light scheme with subtle warm tint
    * `colorSchemeDark` - neutral dark scheme
    * `colorSchemeDarkBlue` - our preferred dark scheme used on this website
    * `colorSchemeDarkWarm` - dark scheme with subtle warm tint
* Icon sets:
    * `iconSetQuartz` - our default icon set
        * `iconSetQuartz({strokeWidth: number})` you can call iconSetQuartz as a function to provide a custom stroke width in pixels (the default is 1.5)
        * `iconSetQuartzLight` and `iconSetQuartzBold` preset lighter and bolder versions of the Quartz icons.
    * `iconSetAlpine` - the icon set used by the Alpine theme
    * `iconSetMaterial` - the Material Design icon set
* Checkbox style:
    * `checkboxStyleDefault` - checkbox style used by our themes. There is only one style provided which is configurable through parameters. It being a part allows you to replace it with your own checkbox styles if desired.
* Input style:
    * `inputStyleBase` - unstyled inputs with many parameters to configure their appearance
    * `inputStyleBordered` - inputs with a border around them
    * `inputStyleUnderlined` - inputs with a line underneath them as used in Material Design
* Tab styles:
    * `tabStyleBase` - unstyled tabs with many parameters to configure their appearance
    * `tabStyleQuartz` - tabs styled as per the Quartz theme
    * `tabStyleMaterial` - tabs styled as per the Material theme
    * `tabStyleAlpine` - tabs styled as per the Alpine theme
    * `tabStyleRolodex` - tabs designed to imitate paper cards, as used by the Balham theme
